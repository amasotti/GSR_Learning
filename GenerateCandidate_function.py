#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Oct 23 2020@author: angelaxusc"""############### generate_candidate() in class candidate##############        #Function: generate candidates from root + suffix pair        #Input: 2 variables of the type Lexeme#Output: a list containing variables of the type candidateimport GSRlearner as gsrlndef generate_candidate(root, suffix):    cand_list = []        if root.kind != 'root':        return("Error: The root is not valid!")    if suffix.kind != 'suffix':        return("Error: The suffix is not valid!")        # the ROOT either:    # a. is related to a thematic C, or    #   e.g.    #   [[ 'tagis', 0.4]]            # b. is not related to a thematic C    #   e.g.    #   [[ 'apa',  0.0]]        # the SUFFIX either:    # a. occurs with a thematic C,     #   e.g.    # [[ 'sia',  0.3],    #  [ 'mia', 0.2],    #  [ 'fia',  0.3],    #  [ 'tia', 0.6],    # ...    #  [ 'ina', 0.0],    #  [ 'a', 0.0]    # ]    # b. does not occur with a thematic C        hasThmC = True    reqThmC = True    if root.allomorphs[0][1] == 0.0:        hasThmC = False            if len(suffix.allomorphs) == 1:        reqThmC = False            #CASE 1: hasThmC == True, reqThmC == True        #CASE 1a: the suffix does not have alternative forms;        #CASE 1b: the suffix has alternative forms, i.e. -ia, -aga    #CASE 2: hasThmC == True, reqThmC == False    #CASE 3: hasThmC == False, reqThmC == True    #CASE 4: hasThmC == False, reqThmC == False            #CASE 4    if hasThmC == False and reqThmC == False:        #generate the only possible candidate: root + no C + suffix        cand = root.allomorphs[0][0] + suffix.allomorphs[0][0]        newCand = gsrln.candidate(cand, [], 0)        cand_list.append(newCand)        #CASE 2    if hasThmC == True and reqThmC == False:        rtNc = root.allomorphs[0][0]        rt = rtNc[0:-1]        #generate the candidate: root + no C + suffix        cand = rt + suffix.allomorphs[0][0]        newCand = gsrln.candidate(cand, [], 0)        cand_list.append(newCand)                #generate the candidate: root + root C + suffix        cand = rtNc + '(r)' + suffix.allomorphs[0][0]        newCand = gsrln.candidate(cand, [], 0)        newCand.activityLevel = root.allomorphs[0][1]        cand_list.append(newCand)            #CASE 3    if hasThmC == False and reqThmC == True:        rt = root.allomorphs[0][0]                hasAlt = False        isIA = False        isAGA = False        check1 = suffix.allomorphs[0][0]        check2 = check1[1:]        if check1 in ['ina', 'a']:            hasAlt = True            isIA = True        elif check2 == 'ia':            hasAlt = True            isIA = True                    elif check1 in ['ga']:            hasAlt = True            isAGA = True        elif check2 == 'aga':            hasAlt = True            isAGA = True        if hasAlt == False:            sfx = check2            #generate the candidate: root + no C + suffix            cand = rt + sfx            newCand = gsrln.candidate(cand, [], 0)            cand_list.append(newCand)                        #generate the candidates: root + suffix C + suffix            for x in range(len(suffix.allomorphs)):                crt = suffix.allomorphs[x][0]                crtC = crt[0]                cand = rt + crtC + '(s)' + sfx                newCand = gsrln.candidate(cand, [], 0)                newCand.activityLevel = suffix.allomorphs[x][1]                cand_list.append(newCand)                    elif hasAlt == True:            if isIA == True:                sfx = 'ia'            elif isAGA == True:                sfx = 'aga'            suffix_w_c = []                        if isIA == True:                for x in suffix.allomorphs:                    if x[0] not in ['ina', 'a']:                        suffix_w_c.append(x)                                    #generate the candidate: root + no C + 'ina'                cand = rt + 'ina'                newCand = gsrln.candidate(cand, [], 0)                cand_list.append(newCand)                            #generate the candidate: root + no C + 'a'                cand = rt + 'a'                newCand = gsrln.candidate(cand, [], 0)                cand_list.append(newCand)                        #generate the candidate: root + no C + 'ia'                cand = rt + 'ia'                newCand = gsrln.candidate(cand, [], 0)                cand_list.append(newCand)                            elif isAGA == True:                for x in suffix.allomorphs:                    if x[0] != 'ga':                        suffix_w_c.append(x)                                    #generate the candidate: root + no C + 'ga'                cand = rt + 'ga'                newCand = gsrln.candidate(cand, [], 0)                cand_list.append(newCand)                            #generate the candidate: root + no C + 'aga'                cand = rt + 'aga'                newCand = gsrln.candidate(cand, [], 0)                cand_list.append(newCand)                        #generate the candidate: root + suffix C + suffix            for x in range(len(suffix_w_c)):                crt = suffix_w_c[x][0]                crtSfxC = crt[0]                cand = rt + crtSfxC + '(s)' + sfx                newCand = gsrln.candidate(cand, [], 0)                newCand.activityLevel = suffix_w_c[x][1]                cand_list.append(newCand)                #CASE 1    if hasThmC == True and reqThmC == True:        rtNc = root.allomorphs[0][0]        rtC_actLevel = root.allomorphs[0][1]        rt = rtNc[0:-1]        rtC = rtNc[-1]                hasAlt = False        isIA = False        isAGA = False        check1 = suffix.allomorphs[0][0]        check2 = check1[1:]        if check1 in ['ina', 'a']:            hasAlt = True            isIA = True        elif check2 == 'ia':            hasAlt = True            isIA = True                    elif check1 == 'ga':            hasAlt = True            isAGA = True        elif check2 == 'aga':            hasAlt = True            isAGA = True                    if hasAlt == False:            sfx = check2                        #generate the candidate: root + no C + suffix            cand = rt + sfx            newCand = gsrln.candidate(cand, [], 0)            cand_list.append(newCand)                        #generate the candidates: root + C + suffix            for x in range(len(suffix.allomorphs)):                crt = suffix.allomorphs[x][0]                crtSfxC = crt[0]                                #when suffix C is not the same as root C                if rtC != crtSfxC:                                        #generate the candidate: root + suffix C + suffix                    cand = rt + crtSfxC + '(s)' + sfx                    newCand = gsrln.candidate(cand, [], 0)                    newCand.activityLevel = suffix.allomorphs[x][1]                    cand_list.append(newCand)                                #when suffix C is not the same as root C                elif rtC == crtSfxC:                    #generate the candidate: root + C(root) + suffix                    cand = rt + rtC + '(r)' + sfx                    newCand = gsrln.candidate(cand, [], 0)                    newCand.activityLevel = rtC_actLevel                    cand_list.append(newCand)                                        #generate the candidate: root + C(suffix) + suffix                    cand = rt + crtSfxC + '(s)' + sfx                    newCand = gsrln.candidate(cand, [], 0)                    newCand.activityLevel = suffix.allomorphs[x][1]                    cand_list.append(newCand)                                        #generate the candidate: root + C(root+suffix) + suffix                    cand = rt + rtC + '(rs)' + sfx                    newCand = gsrln.candidate(cand, [], 0)                    newCand.activityLevel = rtC_actLevel + suffix.allomorphs[x][1]                    cand_list.append(newCand)                    elif hasAlt == True:            if isIA == True:                sfx = 'ia'            elif isAGA == True:                sfx = 'aga'            suffix_w_c = []            if isIA == True:                for x in suffix.allomorphs:                    if x[0] not in ['ina', 'a']:                        suffix_w_c.append(x)                                    #generate the candidate: root + no C + 'ina'                cand = rt + 'ina'                newCand = gsrln.candidate(cand, [], 0)                cand_list.append(newCand)                            #generate the candidate: root + no C + 'a'                cand = rt + 'a'                newCand = gsrln.candidate(cand, [], 0)                cand_list.append(newCand)                        #generate the candidate: root + no C + 'ia'                cand = rt + 'ia'                newCand = gsrln.candidate(cand, [], 0)                cand_list.append(newCand)                                #generate the candidate: root + root C + 'ina'                cand = rtNc + '(r)' + 'ina'                newCand = gsrln.candidate(cand, [], 0)                newCand.activityLevel = rtC_actLevel                cand_list.append(newCand)                            #generate the candidate: root + root C + 'a'                cand = rtNc + '(r)' + 'a'                newCand = gsrln.candidate(cand, [], 0)                newCand.activityLevel = rtC_actLevel                cand_list.append(newCand)                            elif isAGA == True:                for x in suffix.allomorphs:                    if x[0] != 'ga':                        suffix_w_c.append(x)                                    #generate the candidate: root + no C + 'ga'                cand = rt + 'ga'                newCand = gsrln.candidate(cand, [], 0)                cand_list.append(newCand)                            #generate the candidate: root + no C + 'aga'                cand = rt + 'aga'                newCand = gsrln.candidate(cand, [], 0)                cand_list.append(newCand)                                #generate the candidate: root + root C + 'ga'                cand = rtNc + '(r)' + 'ga'                newCand = gsrln.candidate(cand, [], 0)                newCand.activityLevel = rtC_actLevel                cand_list.append(newCand)                                        for x in range(len(suffix_w_c)):                crt = suffix_w_c[x][0]                crtSfxC = crt[0]                                #when suffix C is not the same as root C                if rtC != crtSfxC:                                        #generate the candidate: root + suffix C + suffix                    cand = rt + crtSfxC + '(s)' + sfx                    newCand = gsrln.candidate(cand, [], 0)                    newCand.activityLevel = suffix_w_c[x][1]                    cand_list.append(newCand)                                #when suffix C is the same as root C                elif rtC == crtSfxC:                    #generate the candidate: root + C(root) + suffix                    cand = rtNc + '(r)' + sfx                    newCand = gsrln.candidate(cand, [], 0)                    newCand.activityLevel = rtC_actLevel                    cand_list.append(newCand)                                        #generate the candidate: root + C(suffix) + suffix                    cand = rtNc + '(s)' + sfx                    newCand = gsrln.candidate(cand, [], 0)                    newCand.activityLevel = suffix_w_c[x][1]                    cand_list.append(newCand)                                        #generate the candidate: root + C(root+suffix) + suffix                    cand = rtNc + '(rs)' + sfx                    newCand = gsrln.candidate(cand, [], 0)                    newCand.activityLevel = rtC_actLevel + suffix_w_c[x][1]                    cand_list.append(newCand)                return cand_list    #Test:    # #CASE 3:# rt1 = [['apa', 0.0]]# rt_lex = gsrln.lexeme('apa', rt1, 'root')# sf1 = [['ga', 0.0], ['taga', 0.2], ['maga', 0.3], ['faga', 0.1]]# sf_lex = gsrln.lexeme('-aga', sf1, 'suffix')#CASE 1b:rt2 = [['tagis', 0.4]]rt_lex = gsrln.lexeme('tagi', rt2, 'root')sf2 = [['ina', 0.3], ['a', 0.3], ['sia', 0.3], ['tia', 0.2], ['fia', 0.4], ['mia', 0.3]]sf_lex = gsrln.lexeme('PV', sf2, 'suffix')cands = generate_candidate(rt_lex, sf_lex)# Current: # code works if self.checkViolationsSign() is commented out from the def of candidates;# root + root C + suffix generated for each entry in allomorphs of suffix